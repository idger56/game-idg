import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js";
import {
  getAuth,
  onAuthStateChanged,
  signOut
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-auth.js";

import {
  getFirestore,
  collection,
  getDocs,
  query,
  where,
  doc,
  updateDoc
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyBNuHz-OPbVWHoc7gtuxHU21-CC5TbYKbw",
  authDomain: "game-idg.firebaseapp.com",
  projectId: "game-idg",
  storageBucket: "game-idg.appspot.com",
  messagingSenderId: "987199066254",
  appId: "1:987199066254:web:ed82cea15f4a7b7a4279df",
  measurementId: "G-QLLFXDHX51"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

const nicknameSpan = document.getElementById("user-nickname");
const myProfileDiv = document.getElementById("my-profile");
const usersList = document.getElementById("users-list");
const authBtn = document.getElementById("auth-btn");

if (authBtn) {
  authBtn.addEventListener("click", () => {
    if (auth.currentUser) {
      signOut(auth).then(() => {
        window.location.href = "index.html";
      });
    }
  });
}

onAuthStateChanged(auth, async (user) => {
  const allGamesSnapshot = await getDocs(collection(db, "games"));
  const totalGames = allGamesSnapshot.size;

  if (!user) {
    myProfileDiv.innerHTML = "<p>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.</p>";
    await loadOtherUsers(null, totalGames);
    return;
  }

if (user) {
  setInterval(async () => {
    await updateDoc(doc(db, "users", user.uid), {
      lastActive: new Date()
    });
  }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

  const q = query(collection(db, "users"), where("uid", "==", user.uid));
  const snapshot = await getDocs(q);
  if (snapshot.empty) {
    myProfileDiv.innerHTML = "<p>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>";
    return;
  }

  const userDoc = snapshot.docs[0];
  const userData = userDoc.data();
  const userDocId = userDoc.id;

  nicknameSpan.textContent = `üë§ ${userData.nickname}`;
  nicknameSpan.style.display = "inline-block";

  const userRatingsSnapshot = await getDocs(query(collection(db, "ratings"), where("userId", "==", user.uid)));
  const userRatings = userRatingsSnapshot.docs.map(d => d.data());
  const avgRating = userRatings.length
    ? (userRatings.reduce((a, b) => a + b.rating, 0) / userRatings.length).toFixed(1)
    : "‚Äî";
  const percentComplete = totalGames
    ? Math.round((userRatings.length / totalGames) * 100)
    : 0;

  myProfileDiv.innerHTML = `
    <div class="game-card">
      <img id="profile-avatar" src="${userData.avatar || 'https://cdn-images.dzcdn.net/images/cover/8b685b46bec333da34a4f17c7a3e4fc9/1900x1900-000000-80-0-0.jpg'}" alt="–ê–≤–∞—Ç–∞—Ä">
      <div class="game-content">
        <h3>${userData.nickname}</h3>
        <p><strong>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</strong> ${avgRating}</p>
        <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> ${percentComplete}%</p>
        <p><strong>–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä:</strong> ${userData.favoriteGenre || '‚Äî'}</p>
        <p><em>${userData.quote || '‚Äî'}</em></p>
        <input type="url" id="avatar-url" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É" value="${userData.avatar || ''}" />
        <input type="text" id="quote-input" placeholder="–¶–∏—Ç–∞—Ç–∞" value="${userData.quote || ''}" />
        <input type="text" id="genre-input" placeholder="–õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä" value="${userData.favoriteGenre || ''}" />
        <button id="save-profile">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
      </div>
    </div>
  `;

  const profileAvatar = document.getElementById("profile-avatar");
  profileAvatar.onerror = () => {
    profileAvatar.src = "https://cdn-images.dzcdn.net/images/cover/8b685b46bec333da34a4f17c7a3e4fc9/1900x1900-000000-80-0-0.jpg";
  };

  document.getElementById("save-profile").addEventListener("click", async () => {
    const quote = document.getElementById("quote-input").value.trim();
    const genre = document.getElementById("genre-input").value.trim();
    const avatarUrl = document.getElementById("avatar-url").value.trim();

    await updateDoc(doc(db, "users", userDocId), {
      avatar: avatarUrl,
      quote,
      favoriteGenre: genre,
      lastActive: new Date()
    });

    alert("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!");
    location.reload();
  });

  await loadOtherUsers(user.uid, totalGames);
});

async function loadOtherUsers(currentUserId, totalGames) {
  const usersSnapshot = await getDocs(collection(db, "users"));
  const ratingsSnapshot = await getDocs(collection(db, "ratings"));
  const gamesSnapshot = await getDocs(collection(db, "games"));

  const games = gamesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  const ratingMap = {};
  for (const doc of ratingsSnapshot.docs) {
    const r = doc.data();
    if (!ratingMap[r.userId]) ratingMap[r.userId] = [];
    ratingMap[r.userId].push(r);
  }

  const now = Date.now();

  for (const docSnap of usersSnapshot.docs) {
    const user = docSnap.data();

    const ratings = ratingMap[user.uid] || [];
    const percentComplete = totalGames ? Math.round((ratings.length / totalGames) * 100) : 0;

    // --- –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å ---
    let statusText = "–û—Ñ—Ñ–ª–∞–π–Ω";
    let statusClass = "offline";
    if (user.lastActive && now - user.lastActive.toMillis() < 5 * 60 * 1000) {
      statusText = "–û–Ω–ª–∞–π–Ω";
      statusClass = "online";
    } else if (user.lastActive) {
      const minsAgo = Math.floor((now - user.lastActive.toMillis()) / 60000);
      statusText = `–ë—ã–ª –≤ —Å–µ—Ç–∏ ${minsAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    }

    // --- –ü–æ–¥—Å—á—ë—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
    const medals = [];

    // 1. –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
    const m1 = getMedalLevel(percentComplete, 50, 80, 100);
    if (m1) medals.push({ ...m1, name: "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π" });

    // 2. –ö—Ä–∏—Ç–∏–∫
    const m2 = getMedalLevel(ratings.length, 10, 30, 50);
    if (m2) medals.push({ ...m2, name: "–ö—Ä–∏—Ç–∏–∫" });

    // 3. –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∂–∞–Ω—Ä–æ–≤
    const genresPlayed = new Set();
    ratings.forEach(r => {
      const game = games.find(g => g.id === r.gameId);
      if (game && game.category) {
        if (Array.isArray(game.category)) {
          game.category.forEach(c => genresPlayed.add(c));
        } else {
          genresPlayed.add(game.category);
        }
      }
    });
    const m3 = getMedalLevel(genresPlayed.size, 3, 5, 8);
    if (m3) medals.push({ ...m3, name: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∂–∞–Ω—Ä–æ–≤" });

    // 4. –õ—é–±–∏–º—á–∏–∫ –∂–∞–Ω—Ä–∞
    const genreCount = {};
    ratings.forEach(r => {
      const game = games.find(g => g.id === r.gameId);
      if (game && game.category) {
        const categories = Array.isArray(game.category) ? game.category : [game.category];
        categories.forEach(cat => {
          genreCount[cat] = (genreCount[cat] || 0) + 1;
        });
      }
    });
    const favGenrePercent = Math.max(...Object.values(genreCount).map(v => (v / ratings.length) * 100 || 0));
    const m4 = getMedalLevel(favGenrePercent, 50, 70, 90);
    if (m4) medals.push({ ...m4, name: "–õ—é–±–∏–º—á–∏–∫ –∂–∞–Ω—Ä–∞" });

    // --- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –º–µ–¥–∞–ª—è–º–∏ ---
    let medalsHTML = `<div class="achievements-bar">`;
    medals.forEach(m => {
      medalsHTML += `<div class="medal" title="${m.name} ‚Äî –£—Ä–æ–≤–µ–Ω—å ${m.level}">${m.icon}</div>`;
    });
    medalsHTML += `</div>`;

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    const profileBtn = `<button class="view-profile" onclick="window.location.href='profile.html?uid=${user.uid}'">
                          ${user.uid === currentUserId ? "–û—Ç–∫—Ä—ã—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å" : "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"}
                        </button>`;
                        
    // --- –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const card = document.createElement("div");
    card.className = "game-card hover-animate";
    card.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: flex-start;">
        <div style="flex: 1;">
          <img src="${user.avatar || 'https://via.placeholder.com/300x300?text=–ê–≤–∞—Ç–∞—Ä'}" 
               alt="–ê–≤–∞—Ç–∞—Ä" 
               onerror="this.src='https://via.placeholder.com/300x300?text=–ê–≤–∞—Ç–∞—Ä'">
          <div class="game-content">
            <h3>${user.nickname}</h3>
            <p class="status ${statusClass}">${statusText}</p>
            <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> ${percentComplete}%</p>
            <p><em>${user.quote || '‚Äî'}</em></p>
          </div>
        </div>
        ${medalsHTML}
      </div>
    `;

    usersList.appendChild(card);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function getMedalLevel(value, bronze, silver, gold) {
  if (value >= gold) return { icon: "ü•á", level: "–ó–æ–ª–æ—Ç–æ" };
  if (value >= silver) return { icon: "ü•à", level: "–°–µ—Ä–µ–±—Ä–æ" };
  if (value >= bronze) return { icon: "ü•â", level: "–ë—Ä–æ–Ω–∑–∞" };
  return null;
}


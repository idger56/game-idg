// ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-auth.js";

import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  query,
  where,
  doc,
  updateDoc,
  setDoc,  
  getDoc
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-firestore.js";

// ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase –ø—Ä–æ–µ–∫—Ç–∞
const firebaseConfig = {
  apiKey: "AIzaSyBNuHz-OPbVWHoc7gtuxHU21-CC5TbYKbw",
  authDomain: "game-idg.firebaseapp.com",
  projectId: "game-idg",
  storageBucket: "game-idg.firebasestorage.app",
  messagingSenderId: "987199066254",
  appId: "1:987199066254:web:ed82cea15f4a7b7a4279df",
  measurementId: "G-QLLFXDHX51"
};

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);        // –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const db = getFirestore(app);     // –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firestore

// ‚úÖ Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä—ã)
const adminEmail = "boreko.ivan@gmail.com";

// ‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const authSection = document.getElementById("auth-section");
const mainSection = document.getElementById("main-section");
const authMessage = document.getElementById("auth-message");
const form = document.getElementById("add-game-form");
const gamesList = document.getElementById("games-list");

const authBtn = document.getElementById("auth-btn");
const showCompletedBtn = document.getElementById("show-completed");
const showProcessBtn = document.getElementById("show-process");
const showPlannedBtn = document.getElementById("show-planned");

let currentFilter = "all"; // –§–∏–ª—å—Ç—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä: "all", "completed", "planned"

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function clearAuthMessage() {
  authMessage.textContent = "";
}

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
onAuthStateChanged(auth, async (user) => {
  clearAuthMessage();

  const nicknameSpan = document.getElementById("user-nickname");

  if (user) {
    authSection.style.display = "none";
    mainSection.style.display = "block";
    authBtn.textContent = "–í—ã—Ö–æ–¥";
    form.style.display = (user.email === adminEmail) ? "block" : "none";

    try {
      const q = query(collection(db, "users"), where("uid", "==", user.uid));
      const snapshot = await getDocs(q);

      if (!snapshot.empty) {
        const userData = snapshot.docs[0].data();
        nicknameSpan.textContent = `üë§ ${userData.nickname}`;
        nicknameSpan.style.display = "inline-block";
      } else {
        nicknameSpan.textContent = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        nicknameSpan.style.display = "inline-block";
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∏–∫–∞:", error.message);
    }

    loadGames();
  } else {
    authSection.style.display = "block";
    mainSection.style.display = "none";
    authBtn.textContent = "–í—Ö–æ–¥";
    nicknameSpan.style.display = "none";
    nicknameSpan.textContent = "";
  }
});


// ‚úÖ –ö–Ω–æ–ø–∫–∞ "–í—Ö–æ–¥/–í—ã—Ö–æ–¥"
authBtn.addEventListener("click", () => {
  if (auth.currentUser) {
    signOut(auth); // –ï—Å–ª–∏ –≤–æ—à–µ–ª ‚Äî –≤—ã—Ö–æ–¥–∏–º
  } else {
    authSection.style.display = "block";
    mainSection.style.display = "none";
  }
});

// ‚úÖ –§–∏–ª—å—Ç—Ä: –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
showCompletedBtn.addEventListener("click", () => {
  currentFilter = "completed";
  loadGames();
});

// ‚úÖ –§–∏–ª—å—Ç—Ä: –í –ø—Ä–æ—Ü–µ—Å—Å–µ
showProcessBtn.addEventListener("click", () => {
  currentFilter = "process";
  loadGames();
});

// ‚úÖ –§–∏–ª—å—Ç—Ä: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
showPlannedBtn.addEventListener("click", () => {
  currentFilter = "planned";
  loadGames();
});

window.register = async function () {
  clearAuthMessage();
  const email = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value.trim();
  const nickname = document.getElementById("nickname").value.trim();

  if (!email || !password || !nickname) {
    authMessage.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è";
    return;
  }

  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –≤ Firestore
await setDoc(doc(db, "users", user.uid), {
  uid: user.uid,
  email: user.email,
  nickname
});

    authMessage.textContent = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.";
  } catch (error) {
    if (error.code === "auth/email-already-in-use") {
      authMessage.textContent = "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.";
    } else if (error.code === "auth/weak-password") {
      authMessage.textContent = "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤).";
    } else {
      authMessage.textContent = error.message;
    }
  }
};


window.login = async function () {
  clearAuthMessage();
  const email = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value.trim();

  if (!email || !password) {
    authMessage.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å";
    return;
  }

  try {
    await signInWithEmailAndPassword(auth, email, password);
    // onAuthStateChanged —Å–∞–º —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  } catch (error) {
    if (error.code === "auth/user-not-found") {
      authMessage.textContent = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
    } else if (error.code === "auth/wrong-password") {
      authMessage.textContent = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.";
    } else {
      authMessage.textContent = error.message;
    }
  }
};


// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
form.addEventListener("submit", async (e) => {
  e.preventDefault();

  const user = auth.currentUser;
  if (!user || user.email !== adminEmail) return;

  const title = document.getElementById("title").value.trim();
  const categorySelect = document.getElementById("category");
  const category = Array.from(categorySelect.selectedOptions).map(option => option.value);
  const link = document.getElementById("link").value.trim();
  const image = document.getElementById("image").value.trim();
  const status = document.getElementById("status").value;

  if (!title || category.length === 0 || !link || !image || !status) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
    return;
  }

  try {
    await addDoc(collection(db, "games"), { title, category, link, image, status });
    form.reset();
    loadGames();
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã: " + error.message);
  }
});

// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
async function loadGames() {
  gamesList.innerHTML = "";
  const user = auth.currentUser;

  const snapshot = await getDocs(collection(db, "games"));

  for (const docSnap of snapshot.docs) {
    const game = docSnap.data();
    const gameId = docSnap.id;

    if (currentFilter === "completed" && game.status !== "–ü—Ä–æ–π–¥–µ–Ω–∞") continue;
    if (currentFilter === "process" && game.status !== "–í –ø—Ä–æ—Ü–µ—Å—Å–µ") continue;
    if (currentFilter === "planned" && game.status !== "–í –ø–ª–∞–Ω–∞—Ö") continue;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
    const ratingsQuery = query(collection(db, "ratings"), where("gameId", "==", gameId));
    const ratingsSnapshot = await getDocs(ratingsQuery);

    const ratings = [];
    let userRating = null;

    ratingsSnapshot.forEach(r => {
      const ratingData = r.data();
      ratings.push(ratingData.rating);
      if (user && ratingData.userId === user.uid) {
        userRating = ratingData.rating;
      }
    });

    const avgRating = ratings.length ? (ratings.reduce((a, b) => a + b) / ratings.length).toFixed(1) : null;

    const card = document.createElement("div");
    card.className = "game-card";

    card.innerHTML = `
      <img src="${game.image}" alt="${game.title}" />
      <div class="game-content">
        <h3>${game.title}</h3>
        <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${Array.isArray(game.category) ? game.category.join(", ") : game.category}</p>
        <p>–°—Ç–∞—Ç—É—Å: ${game.status}</p>
        <p>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avgRating ? `${avgRating} ‚≠ê` : "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"}</p>
        <a href="${game.link}" target="_blank">–°–∫–∞—á–∞—Ç—å / –ü–µ—Ä–µ–π—Ç–∏</a>
      </div>
    `;

    const content = card.querySelector(".game-content");

    // –û—Ü–µ–Ω–∫–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç)
    if (user && game.status === "–ü—Ä–æ–π–¥–µ–Ω–∞" && userRating === null) {
      const ratingLabel = document.createElement("label");
      ratingLabel.innerHTML = `
        –û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É:
        <select data-game-id="${gameId}" class="rating-select">
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
          <option value="1">1 ‚≠ê</option>
          <option value="2">2 ‚≠ê</option>
          <option value="3">3 ‚≠ê</option>
          <option value="4">4 ‚≠ê</option>
          <option value="5">5 ‚≠ê</option>
          <option value="6">6 ‚≠ê</option>
          <option value="7">7 ‚≠ê</option>
          <option value="8">8 ‚≠ê</option>          
          <option value="9">9 ‚≠ê</option>          
          <option value="10">10 ‚≠ê</option>
        </select>
      `;
      content.appendChild(ratingLabel);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user && userRating !== null) {
      const ratingInfo = document.createElement("p");
      ratingInfo.textContent = `–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${userRating} ‚≠ê`;
      content.appendChild(ratingInfo);
    }

    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (user && user.email === adminEmail) {
      const editBtn = document.createElement("button");
      editBtn.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å";
      editBtn.className = "edit-button mt-10";


      editBtn.addEventListener("click", () => {
const formHtml = `
  <form class="edit-form">
    <div class="form-group">
      <input type="text" name="title" value="${game.title}" required placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã" class="form-input" />
    </div>
    <div class="form-group">
      <input type="text" name="image" value="${game.image}" required placeholder="URL –∫–∞—Ä—Ç–∏–Ω–∫–∏" class="form-input" />
    </div>
    <div class="form-group">
      <input type="text" name="link" value="${game.link}" required placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É" class="form-input" />
    </div>
    <div class="form-group">
      <select name="status" required class="form-select">
        <option value="–ü—Ä–æ–π–¥–µ–Ω–∞" ${game.status === "–ü—Ä–æ–π–¥–µ–Ω–∞" ? "selected" : ""}>–ü—Ä–æ–π–¥–µ–Ω–∞</option>
        <option value="–í –ø—Ä–æ—Ü–µ—Å—Å–µ" ${game.status === "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" ? "selected" : ""}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
        <option value="–í –ø–ª–∞–Ω–∞—Ö" ${game.status === "–í –ø–ª–∞–Ω–∞—Ö" ? "selected" : ""}>–í –ø–ª–∞–Ω–∞—Ö</option>
      </select>
    </div>
    <button type="submit" class="save-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
  </form>
`;

        card.innerHTML += formHtml;

        const editForm = card.querySelector(".edit-form");
        editForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          const updatedTitle = editForm.title.value.trim();
          const updatedImage = editForm.image.value.trim();
          const updatedLink = editForm.link.value.trim();
          const updatedStatus = editForm.status.value;

          try {
            const gameRef = doc(db, "games", gameId);
            await updateDoc(gameRef, {
              title: updatedTitle,
              image: updatedImage,
              link: updatedLink,
              status: updatedStatus
            });
            alert("–ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            loadGames();
          } catch (error) {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + error.message);
          }
        });
      });

      content.appendChild(editBtn);
    }

    gamesList.appendChild(card);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
  document.querySelectorAll(".rating-select").forEach(select => {
    select.addEventListener("change", async (e) => {
      const rating = parseInt(e.target.value);
      const gameId = e.target.getAttribute("data-game-id");

      if (!user || isNaN(rating)) return;

      try {
        await addDoc(collection(db, "ratings"), {
          userId: user.uid,
          gameId,
          rating
        });
        alert("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
        loadGames();
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: " + error.message);
      }
    });
  });
}
